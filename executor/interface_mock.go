// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go
//
// Generated by this command:
//
//	mockgen -source interface.go -destination interface_mock.go -package executor
//

// Package executor is a generated GoMock package.
package executor

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockIExecutor is a mock of IExecutor interface.
type MockIExecutor struct {
	ctrl     *gomock.Controller
	recorder *MockIExecutorMockRecorder
}

// MockIExecutorMockRecorder is the mock recorder for MockIExecutor.
type MockIExecutorMockRecorder struct {
	mock *MockIExecutor
}

// NewMockIExecutor creates a new mock instance.
func NewMockIExecutor(ctrl *gomock.Controller) *MockIExecutor {
	mock := &MockIExecutor{ctrl: ctrl}
	mock.recorder = &MockIExecutorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIExecutor) EXPECT() *MockIExecutorMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockIExecutor) Execute(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Execute indicates an expected call of Execute.
func (mr *MockIExecutorMockRecorder) Execute(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockIExecutor)(nil).Execute), ctx)
}

// StopExecutor mocks base method.
func (m *MockIExecutor) StopExecutor(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopExecutor", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// StopExecutor indicates an expected call of StopExecutor.
func (mr *MockIExecutorMockRecorder) StopExecutor(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopExecutor", reflect.TypeOf((*MockIExecutor)(nil).StopExecutor), ctx)
}
